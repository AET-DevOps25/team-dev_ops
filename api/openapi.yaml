openapi: 3.0.3
info:
  title: NicheExplorer API
  version: "1.1.0"
  description: >-
    Canonical contract covering all public micro-service endpoints.
    Generated by merging the specs from Spring API Server, GenAI, Article-Fetcher
    and Topic-Discovery.  Paths are grouped by service tags.
servers:
  - url: http://localhost:8080/api/v1           # Spring Gateway (future)
  - url: http://localhost:8000                  # GenAI (FastAPI)
  - url: http://localhost:8200                  # Article-Fetcher (FastAPI)
  - url: http://localhost:8003                  # Topic-Discovery (FastAPI)

paths:
  ############################
  # GenAI Service
  ############################
  /classify:
    post:
      tags: [GenAI]
      summary: Classify a user query as research vs community and suggest feed id.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassifyRequest'
      responses:
        "200":
          description: Classification result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassifyResponse'
  /embed:
    post:
      tags: [GenAI]
      summary: Generate embedding for a single text.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbedRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbedResponse'
  /embed-batch:
    post:
      tags: [GenAI]
      summary: Generate embeddings for multiple texts with caching.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchEmbedRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchEmbedResponse'
  /embeddings-by-ids:
    post:
      tags: [GenAI]
      summary: Retrieve cached embeddings by document ids.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbeddingsByIdsRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddingsByIdsResponse'
  /arxiv/categories:
    get:
      tags: [GenAI]
      summary: List curated arXiv categories by field.
      responses:
        "200":
          description: Map of fields to category list.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
  /arxiv/build-query:
    post:
      tags: [GenAI]
      summary: Build an advanced arXiv query.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdvancedQueryRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedQueryResponse'

  ############################
  # Article-Fetcher Service
  ############################
  /fetch:
    post:
      tags: [ArticleFetcher]
      summary: Fetch articles/posts from external data source.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchRequest'
      responses:
        "200":
          description: Articles list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchResponse'

  ############################
  # Topic-Discovery Service
  ############################
  /discover-topic:
    post:
      tags: [TopicDiscovery]
      summary: Cluster embeddings into coherent topics.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrendsRequestWithKeys'
      responses:
        "200":
          description: Discovered topics response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrendsResponse'

components:
  schemas:
    ################
    # GenAI models
    ################
    ClassifyRequest:
      type: object
      properties:
        query:
          type: string
      required: [query]
    ClassifyResponse:
      type: object
      properties:
        source:
          type: string
          description: research | community
        feed:
          type: string
      required: [source, feed]
    EmbedRequest:
      type: object
      properties:
        text:
          type: string
      required: [text]
    EmbedResponse:
      type: object
      properties:
        vector:
          type: array
          items:
            type: number
            format: float
      required: [vector]
    BatchEmbedRequest:
      type: object
      properties:
        texts:
          type: array
          items:
            type: string
        ids:
          type: array
          items:
            type: string
      required: [texts, ids]
    BatchEmbedResponse:
      type: object
      properties:
        vectors:
          type: array
          items:
            type: array
            items:
              type: number
              format: float
        cached_count:
          type: integer
      required: [vectors, cached_count]
    EmbeddingsByIdsRequest:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
      required: [ids]
    EmbeddingsByIdsResponse:
      type: object
      properties:
        embeddings:
          type: array
          items:
            type: array
            items:
              type: number
              format: float
        found_count:
          type: integer
      required: [embeddings, found_count]
    AdvancedQueryRequest:
      type: object
      properties:
        search_terms:
          type: string
        category:
          type: string
      required: [search_terms, category]
    AdvancedQueryResponse:
      type: object
      properties:
        query:
          type: string
        description:
          type: string
      required: [query, description]

    ########################
    # Article-Fetcher models
    ########################
    FetchRequest:
      type: object
      properties:
        query:
          type: string
        max_results:
          type: integer
          default: 50
        source_type:
          type: string
          enum: [research, community]
      required: [query, source_type]
    Article:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        link:
          type: string
          format: uri
        abstract:
          type: string
        authors:
          type: array
          items:
            type: string
    FetchResponse:
      type: object
      properties:
        articles:
          type: array
          items:
            $ref: '#/components/schemas/Article'
        total_found:
          type: integer
      required: [articles, total_found]

    ##########################
    # Topic-Discovery models
    ##########################
    TrendsRequestWithKeys:
      type: object
      properties:
        query:
          type: string
        article_keys:
          type: array
          items:
            type: string
        articles:
          type: array
          items:
            $ref: '#/components/schemas/Article'
        min_cluster_size:
          type: integer
          default: 3
      required: [query, article_keys, articles]
    TrendTopic:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        article_count:
          type: integer
        relevance:
          type: integer
        articles:
          type: array
          items:
            $ref: '#/components/schemas/Article'
    TrendsResponse:
      type: object
      properties:
        query:
          type: string
        feed_url:
          type: string
          nullable: true
        trends:
          type: array
          items:
            $ref: '#/components/schemas/TrendTopic'
        total_articles_processed:
          type: integer
      required: [query, trends, total_articles_processed] 