openapi: 3.0.3
info:
  title: NicheExplorer API
  version: "1.0.0"
  description: >-
    Unified API specification for NicheExplorer microservices.
    Provides topic discovery, article fetching, and AI-powered analysis.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

# Explicitly declare that this API is public (no auth required)
security: []

# Default servers - tools will show all when no specific server is selected
servers:
  - url: /
    description: API Gateway - All requests are routed through the gateway.

paths:
  # Spring API Gateway endpoints (ge74tif.student.k8s.aet.cit.tum.de:8080)
  /api/v1/analyses:
    post:
      tags: [Analysis]
      summary: Launch analysis job
      description: |
        Main orchestration endpoint that coordinates classification, article fetching, embedding generation and topic discovery across micro-services.  Returns **202 Accepted** immediately so the client can poll for completion.
      operationId: startAnalysis
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzeRequest'
      responses:
        "202":
          description: Analysis accepted.  Use the Location header to poll `/api/analyses/{id}` until it is finished.
          headers:
            Location:
              schema:
                type: string
              description: URL of the newly created analysis resource.
        "400": { description: Invalid request }
        "500": { description: Internal error }
    get:
      tags: [Analysis]
      summary: List analyses (paginated)
      description: Returns previously submitted analyses ordered by creation date. Does **not** include nested topic/article data to keep payload small.
      operationId: listAnalyses
      parameters:
        - name: limit
          in: query
          schema: { type: integer, default: 20 }
          description: Maximum number of items to return.
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
          description: Offset into the result-set for pagination.
      responses:
        "200":
          description: Paginated list of analyses
          content:
            application/json:
              schema:
                type: object
                properties:
                  total: { type: integer }
                  limit: { type: integer }
                  offset: { type: integer }
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/AnalysisResponse' }
                required: [total, limit, offset, items]

  /api/v1/analyses/{id}:
    get:
      tags: [Analysis]
      summary: Poll analysis status
      description: Returns **200** with full result when the analysis is finished, or **202** while still running.
      operationId: getAnalysis
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200":
          description: Analysis complete
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AnalysisResponse' }
        "202":
          description: Analysis still in progress
        "404": { description: Analysis not found }
    delete:
      tags: [Analysis]
      summary: Delete analysis
      description: Permanently remove analysis and all related data.
      operationId: deleteAnalysis
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        "204": { description: Deleted }
        "401":
          description: Unauthorized
          content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } }
        "403":
          description: Forbidden
          content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } }
        "404": { description: Analysis not found }

  # GenAI Service endpoints (ge74tif.student.k8s.aet.cit.tum.de:8000)
  /api/v1/classify:
    post:
      tags: [AI]
      summary: Classify query intent (research vs community)
      description: |
        Uses a Large Language Model (LLM) to decide whether the user's query should be answered with peer-reviewed research articles (arXiv) or community-sourced discussions (Reddit).  Returns the suggested source and category along with a confidence score.
      operationId: classifyQuery
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassifyRequest'
      responses:
        "200":
          description: Classification result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassifyResponse'

  /api/v1/embeddings:
    post:
      tags: [AI]
      summary: Generate embeddings
      description: Generate and cache embeddings for multiple texts
      operationId: generateEmbeddings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbeddingRequest'
      responses:
        "200":
          description: Generated embeddings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddingResponse'
    get:
      tags: [AI]
      summary: Retrieve cached embeddings
      description: Get previously generated embeddings by document IDs
      operationId: getEmbeddings
      parameters:
        - name: ids
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
          description: Document IDs to retrieve embeddings for
      responses:
        "200":
          description: Retrieved embeddings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddingResponse'

  /api/v1/query/build/{source}:
    post:
      tags: [AI]
      summary: Build source-specific query
      description: Generate optimized query for a specific data source using AI
      operationId: buildSourceQuery
      parameters:
        - name: source
          in: path
          required: true
          schema:
            type: string
            enum: [arxiv, reddit]
          description: Target data source
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryBuilderRequest'
      responses:
        "200":
          description: Generated query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryBuilderResponse'

  # Article Fetcher Service endpoints (ge74tif.student.k8s.aet.cit.tum.de:8200)
  /api/v1/articles:
    post:
      tags: [Articles]
      summary: Fetch articles
      description: Retrieve articles from research or community sources
      operationId: fetchArticles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArticleFetchRequest'
      responses:
        "200":
          description: Fetched articles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArticleFetchResponse'

  /api/v1/sources/{source}/categories:
    get:
      tags: [Articles]
      summary: Get source categories
      description: Get available categories for a specific data source
      operationId: getSourceCategories
      parameters:
        - name: source
          in: path
          required: true
          schema:
            type: string
            enum: [arxiv, reddit]
          description: Data source
      responses:
        "200":
          description: Category list organized by topic/field
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string

  # Topic Discovery Service endpoints (ge74tif.student.k8s.aet.cit.tum.de:8100)
  /api/v1/topics/discover:
    post:
      tags: [Topics]
      summary: Discover topics
      description: Cluster articles into coherent topics using embeddings
      operationId: discoverTopics
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicDiscoveryRequest'
      responses:
        "200":
          description: Discovered topics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicDiscoveryResponse'

components:
  schemas:
    ################
    # AI Models
    ################
    ClassifyRequest:
      type: object
      properties:
        query:
          type: string
          description: User's natural language query
      required: [query]

    ClassifyResponse:
      type: object
      properties:
        source:
          type: string
          enum: [arxiv, reddit]
          description: Detected specific source platform
        source_type:
          type: string
          enum: [research, community]
          description: Broader source category (research papers vs community discussions)
        suggested_category:
          type: string
          description: Suggested category/feed for the query
        confidence:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Confidence score for the classification (0-1)
      required: [source, source_type, suggested_category]

    EmbeddingRequest:
      type: object
      properties:
        texts:
          type: array
          items:
            type: string
          description: Texts to generate embeddings for
        ids:
          type: array
          items:
            type: string
          description: Document IDs for caching
      required: [texts, ids]

    EmbeddingResponse:
      type: object
      properties:
        embeddings:
          type: array
          items:
            type: array
            items:
              type: number
              format: float
          description: Generated/retrieved embedding vectors
        cached_count:
          type: integer
          description: Number of embeddings retrieved from cache (0 if all new)
        found_count:
          type: integer
          description: Number of embeddings found (for GET requests)
      required: [embeddings]

    QueryBuilderRequest:
      type: object
      properties:
        search_terms:
          type: string
          description: Natural language search terms
        filters:
          type: object
          description: Source-specific filters
          properties:
            category:
              type: string
              description: Category (e.g., cs.CV for arXiv)
            subreddit:
              type: string
              description: Subreddit name (for Reddit)
            timeframe:
              type: string
              enum: [past_hour, past_day, past_week, past_month, past_year, all_time]
              description: Time range filter
            author:
              type: string
              description: Author/user filter
            language:
              type: string
              description: Language filter
      required: [search_terms]

    QueryBuilderResponse:
      type: object
      properties:
        query:
          type: string
          description: Generated query string for the source
        description:
          type: string
          description: Human-readable query explanation
        source:
          type: string
          description: Source this query was built for
      required: [query, description, source]

    ########################
    # Article Models
    ########################
    ArticleFetchRequest:
      type: object
      properties:
        query:
          type: string
          description: Search query (source-specific syntax)
        limit:
          type: integer
          default: 50
          description: Maximum articles to fetch
        source:
          type: string
          enum: [arxiv, reddit]
          description: Specific source to fetch from
        category:
          type: string
          description: Source-specific category (e.g., cs.AI or MachineLearning)
        filters:
          type: object
          description: Additional filters understood by the target source
          additionalProperties: true
      required: [query, source]

    Article:
      type: object
      properties:
        id:
          type: string
          description: Unique article identifier
        title:
          type: string
          description: Article title
        link:
          type: string
          format: uri
          description: Article URL
        summary:
          type: string
          description: Article abstract or summary
        authors:
          type: array
          items:
            type: string
          description: Article authors
        published:
          type: string
          format: date-time
          description: Publication date
        source:
          type: string
          enum: [arxiv, reddit]
          description: Source platform where the article was fetched from
        metadata:
          type: object
          description: Source-specific metadata
          additionalProperties: true
          example:
            # For arxiv
            arxiv_id: "2301.12345"
            categories: ["cs.AI", "cs.LG"]
            # For reddit
            subreddit: "MachineLearning"
            score: 42
            num_comments: 15
      required: [id, title, link, source]

    ArticleFetchResponse:
      type: object
      properties:
        articles:
          type: array
          items:
            $ref: '#/components/schemas/Article'
        total_found:
          type: integer
          description: Total articles matching query
        source:
          type: string
          enum: [arxiv, reddit]
          description: Source used for fetching
      required: [articles, total_found, source]

    ##########################
    # Topic Models
    ##########################
    TopicDiscoveryRequest:
      type: object
      properties:
        query:
          type: string
          description: Original user query
        article_ids:
          type: array
          items:
            type: string
          description: Article IDs with cached embeddings
        articles:
          type: array
          items:
            $ref: '#/components/schemas/Article'
          description: Article metadata
        min_cluster_size:
          type: integer
          default: 3
          description: Minimum articles per topic
      required: [query, article_ids, articles]

    Topic:
      type: object
      properties:
        id:
          type: string
          description: Topic identifier
        title:
          type: string
          description: Topic title
        description:
          type: string
          description: Topic description
        article_count:
          type: integer
          description: Number of articles in this topic
        relevance:
          type: integer
          minimum: 0
          maximum: 100
          description: Topic relevance score (0-100)
        articles:
          type: array
          items:
            $ref: '#/components/schemas/Article'
      required: [id, title, description, article_count, relevance, articles]

    TopicDiscoveryResponse:
      type: object
      properties:
        query:
          type: string
          description: Original query
        topics:
          type: array
          items:
            $ref: '#/components/schemas/Topic'
        total_articles_processed:
          type: integer
          description: Total articles analyzed
      required: [query, topics, total_articles_processed]

    ######################
    # Main API Models
    ######################
    AnalyzeRequest:
      type: object
      properties:
        query:
          type: string
          description: User's research question
        auto_detect:
          type: boolean
          default: true
          description: Auto-detect the best source when `source` is omitted.
        max_articles:
          type: integer
          default: 50
          minimum: 1
          maximum: 100
          description: Cap on number of articles processed.
        source:
          type: string
          enum: [arxiv, reddit]
          description: Manual source override.
        category:
          type: string
          description: Manual category/feed override.
      required: [query]

    AnalysisResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Analysis ID
        query:
          type: string
          description: Original query
        type:
          type: string
          enum: [research, community]
          description: Analysis type based on source category
        feed_url:
          type: string
          format: uri
          description: Feed URL that was used for the analysis
        total_articles_processed:
          type: integer
          description: Total number of articles processed in this analysis
        created_at:
          type: string
          format: date-time
          description: Analysis creation timestamp
        topics:
          type: array
          items:
            $ref: '#/components/schemas/Topic'
      required: [id, query, type, feed_url, total_articles_processed, created_at, topics]

    Error:
      type: object
      properties:
        code: { type: string }
        message: { type: string }
      required: [code, message]

  securitySchemes: {}
