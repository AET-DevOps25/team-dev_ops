GitHub Repository Variables Setup Guide
==========================================

## Empfohlener Workflow: deploy_docker_ssm.yml (AWS Systems Manager)

### 1. Repository Variables (Settings → Secrets and variables → Actions → Variables):
AWS_REGION=us-east-1
EC2_INSTANCE_NAME=deploy-instance  
AWS_EC2_USER=ec2-user

### 2. Repository Secrets (Settings → Secrets and variables → Actions → Secrets):
AWS_ACCESS_KEY_ID=AKIAXXXXXXXXXXXXXXXX
AWS_SECRET_ACCESS_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
AWS_SESSION_TOKEN=xxxxxxxx (nur nötig bei temporären Credentials)

### 3. EC2 Instance Vorbereitung:
# Taggen Sie Ihre EC2 Instanz mit dem Namen:
aws ec2 create-tags --resources IHRE-INSTANCE-ID --tags Key=Name,Value=deploy-instance

# Stellen Sie sicher, dass Ihre EC2 Instanz eine IAM Role hat mit:
# - AmazonSSMManagedInstanceCore Policy
# - AmazonS3FullAccess Policy (für temporäre Dateiübertragung)

### 4. Alternative: Original Workflow (deploy_docker.yml)
Falls Sie den SSH-basierten Workflow verwenden möchten:

Variables:
EC2_PUBLIC_IP=44.204.187.53 (Ihre aktuelle IP)
AWS_EC2_USER=ec2-user

Secrets:
AWS_EC2_PRIVATE_KEY=-----BEGIN RSA PRIVATE KEY-----
(Ihr kompletter privater SSH-Schlüssel)

### 5. Custom Domain Workflow (deploy_docker_domain.yml)
Für professionelle Deployments:

Variables:
AWS_REGION=us-east-1
EC2_INSTANCE_NAME=deploy-instance
DOMAIN_NAME=example.com (Ihre Domain)
AWS_EC2_USER=ec2-user

Voraussetzungen:
- Route53 Hosted Zone für Ihre Domain
- Domain DNS auf AWS Route53 zeigend

## Setup-Schritte:

1. Gehen Sie zu Ihrem GitHub Repository
2. Settings → Secrets and variables → Actions
3. Variables Tab → "New repository variable"
4. Fügen Sie die obigen Variables eine nach der anderen hinzu
5. Secrets Tab → "New repository secret" 
6. Fügen Sie die Secrets hinzu

## Workflows testen:
- Gehen Sie zu Actions Tab
- Wählen Sie den gewünschten Workflow
- Klicken Sie "Run workflow" 