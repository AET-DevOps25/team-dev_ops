# This file is for local development overrides.
# It is automatically merged with the base docker-compose.yml by Docker Compose.
services:
  traefik:
    command:
      - "--configfile=/etc/traefik/traefik.yml"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addServicesLabels=true"
    ports:
      - "80:80" # HTTP
      - "8080:8080" # Traefik Dashboard
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`${DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.dashboard.service=api@internal"
      # Explicitly exclude the redirect-to-https router for local development
      - "traefik.http.routers.redirect-to-https.tls=false"
      - "traefik.http.routers.redirect-to-https.priority=0" # Lower priority to effectively disable it
      
      - "--metrics.prometheus=true"                             # Enables the /metrics endpoint
      - "--metrics.prometheus.addServicesLabels=true"           # CRITICAL: Adds the 'service' label to metrics
      - "--metrics.prometheus.entryPoint=traefik"   

  client:
    labels:
      - "traefik.http.routers.client.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.client.tls=false"

  api-server:
    labels:
      - "traefik.http.routers.api-server.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api-server.priority=100"
      - "traefik.http.routers.api-server.middlewares=cors-headers"
      - "traefik.http.routers.api-server.tls=false"
      - "traefik.http.middlewares.cors-headers.headers.accesscontrolalloworiginlist=http://${DOMAIN}"
      - "traefik.http.middlewares.cors-headers.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS"
      - "traefik.http.middlewares.cors-headers.headers.accesscontrolallowheaders=*"
      - "traefik.http.services.api-server.loadbalancer.server.port=8080"

  prometheus:
    labels:
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN}`)"
      - "traefik.http.routers.prometheus.tls=false"

  grafana:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)"
      - "traefik.http.routers.grafana.tls=false"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"