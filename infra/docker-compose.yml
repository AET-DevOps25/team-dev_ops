services:
  # Traefik API Gateway
  traefik:
    image: traefik:v3.0
    command:
      - "--configfile=/etc/traefik/traefik.yml"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
    environment:
      - ACME_EMAIL=${ACME_EMAIL}
    ports:
      - "80:80"
      - "443:443"
      - "8082:8082" # Metrics entrypoint
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./letsencrypt:/letsencrypt
    networks:
      - niche-explorer-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`localhost`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.dashboard.service=api@internal"
      # Add middleware for HTTP-to-HTTPS redirection
      - "traefik.http.routers.redirect-to-https.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.redirect-to-https.priority=1"
      - "traefik.http.routers.redirect-to-https.entrypoints=web"
      - "traefik.http.routers.redirect-to-https.middlewares=redirect-https"
      - "traefik.http.middlewares.redirect-https.redirectscheme.scheme=https"

      - "--metrics.prometheus=true"                             # Enables the /metrics endpoint
      - "--metrics.prometheus.addServicesLabels=true"           # CRITICAL: Adds the 'service' label to metrics
      - "--metrics.prometheus.entryPoint=traefik"   

  # Client (React + Vite)
  client:
    build:
      context: ../
      dockerfile: web-client/Dockerfile
    networks:
      - niche-explorer-network
    depends_on:
      - api-server
    labels:
      - "traefik.enable=true"
      # Route traffic for your domain to the client service
      - "traefik.http.routers.client.rule=Host(`${DOMAIN}`)"
      # Use the 'letsencrypt' resolver for this router
      - "traefik.http.routers.client.tls.certresolver=letsencrypt"
      - "traefik.http.services.client.loadbalancer.server.port=80"

  # Spring Boot API server
  api-server:
    build:
      context: ../
      dockerfile: services/spring-api/Dockerfile
    restart: unless-stopped
    networks:
      - niche-explorer-network
    depends_on:
      - genai
      - topic-discovery
      - article-fetcher
      - db
    environment:
      - GENAI_BASE_URL=http://genai:8000
      - FETCHER_BASE_URL=http://article-fetcher:8200
      - TOPIC_BASE_URL=http://topic-discovery:8100
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    labels:
      - "traefik.enable=true"
      # Route API traffic to the api-server. The PathPrefix is the only rule needed.
      - "traefik.http.routers.api-server.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api-server.priority=100"
      - "traefik.http.routers.api-server.tls.certresolver=letsencrypt"
      # The stripprefix middleware is removed.
      - "traefik.http.routers.api-server.middlewares=cors-headers"
      - "traefik.http.middlewares.cors-headers.headers.accesscontrolalloworiginlist=https://${DOMAIN}"
      - "traefik.http.middlewares.cors-headers.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS"
      - "traefik.http.middlewares.cors-headers.headers.accesscontrolallowheaders=*"
      - "traefik.http.services.api-server.loadbalancer.server.port=8080"

  # GenAI service (FastAPI + Gemini)
  genai:
    build:
      context: ../services/py-genai
      dockerfile: Dockerfile
    restart: unless-stopped
    command: ["uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000", "--timeout-keep-alive", "60"]
    networks:
      - niche-explorer-network
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - CHAIR_API_KEY=${CHAIR_API_KEY}
      - POSTGRES_HOST=db
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

  # Postgres with pgvector extension
  db:
    image: ankane/pgvector:latest
    restart: unless-stopped
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - niche-explorer-network
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

  # Topic Discovery microservice
  topic-discovery:
    build:
      context: ../services/py-topics
      dockerfile: Dockerfile
    restart: unless-stopped
    command: ["uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8100", "--timeout-keep-alive", "60"]
    depends_on:
      - genai
    networks:
      - niche-explorer-network
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GENAI_BASE_URL=http://genai:8000

  # Article Fetcher microservice
  article-fetcher:
    build:
      context: ../services/py-fetcher
      dockerfile: Dockerfile
    restart: unless-stopped
    command: ["uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8200", "--timeout-keep-alive", "60"]
    networks:
      - niche-explorer-network

  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - niche-explorer-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN}`)"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    restart: unless-stopped

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_FEATURE_TOGGLES_ENABLE=logsInExplore
      - GF_LOG_CONSOLECOLORS=true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    depends_on:
      - prometheus
    networks:
      - niche-explorer-network
    restart: unless-stopped

networks:
  niche-explorer-network:
    driver: bridge

volumes:
  pgdata:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local