name: Build Docker Images

on:
  push:
    branches:
      - main
      - feat/k8shelm_deployment # Dummy deployment for testing the new workflow
  workflow_dispatch:

jobs:
  test:
    name: Run Java Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Generate the openapi client code before building the Docker images
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install openapi-generator-cli
        run: npm install -g @openapitools/openapi-generator-cli

      - name: Run OpenAPI Code Generator
        run: bash ./api/scripts/gen-all.sh

      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Make gradlew executable
        run: chmod +x services/spring-api/gradlew

      - name: Generate Gradle Wrapper
        working-directory: ./services/spring-api
        run: gradle wrapper

      - name: Build with Gradle
        working-directory: ./services/spring-api
        run: ./gradlew build

  build:
    name: Build Docker Images
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service: client
            context: .
            dockerfile: ./web-client/Dockerfile

          - service: api-server
            context: .
            dockerfile: ./services/spring-api/Dockerfile

          - service: genai
            context: ./services/py-genai
            dockerfile: ./services/py-genai/Dockerfile

          - service: topic-discovery
            context: ./services/py-topics
            dockerfile: ./services/py-topics/Dockerfile

          - service: article-fetcher
            context: ./services/py-fetcher
            dockerfile: ./services/py-fetcher/Dockerfile

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      # Generate the openapi client code before building the Docker images
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install openapi-generator-cli
        run: npm install -g @openapitools/openapi-generator-cli

      - name: Run OpenAPI Code Generator
        run: bash ./api/scripts/gen-all.sh

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Install Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr

      - name: Build and push Docker Image
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64,linux/arm64
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          secrets: |
            CHAIR_API_KEY=${{ secrets.CHAIR_API_KEY }}
            GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}
