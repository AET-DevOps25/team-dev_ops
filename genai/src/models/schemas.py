from pydantic import BaseModel
from typing import List, Dict, Any

# Classification models
class ClassifyRequest(BaseModel):
    query: str

class ClassifyResponse(BaseModel):
    source: str  # "research" or "community"
    feed: str    # arXiv subject or subreddit name

# Removed DescribeRequest/DescribeResponse - descriptions now generated by LangChain service

# Embedding models
class EmbedRequest(BaseModel):
    text: str

class EmbedResponse(BaseModel):
    vector: List[float]

# Removed similarity models - similarity search not used by frontend

# Trends models
class TrendsRequest(BaseModel):
    query: str
    feed_url: str
    max_articles: int = 50
    min_frequency: int = 2

class Article(BaseModel):
    title: str
    link: str
    abstract: str

class TrendTopic(BaseModel):
    id: str
    title: str
    description: str
    article_count: int
    relevance: int
    articles: List[Dict[str, Any]]

class TrendsResponse(BaseModel):
    query: str
    feed_url: str
    trends: List[TrendTopic]
    total_articles_processed: int 